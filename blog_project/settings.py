"""
Django settings for blog_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv # Import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY') # Read from .env

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true' # Read from .env, default to False

# Handle ALLOWED_HOSTS for production deployments and local testing
ALLOWED_HOSTS_STR = os.getenv('ALLOWED_HOSTS', '').split(',')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR if host.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'core',
    'taggit',
    'django_ckeditor_5',
    'django_cleanup',
    'ads',
]


CKEDITOR_5_UPLOAD_PATH = "media/"
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' # Ensure this is correctly set

# Example CKEditor 5 config with image upload
# settings.py

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': [
            'heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote',
            'imageUpload',
            'mediaEmbed',
            'htmlEmbed', # This is crucial for direct raw HTML input via a button
            'sourceEditing', # Often paired with htmlEmbed for a full source view
        ],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
            'styles': ['full', 'alignLeft', 'alignRight']
        },
        'link': {
            'addTargetToExternalLinks': True,
            'defaultProtocol': 'https://',
        },
        'placeholder': 'Start typing here...',
        'mediaEmbed': {
            'previewsInData': True,
        },
        'htmlEmbed': {
            'showPreviews': True,
            # 'sanitizeHtml': 'your_sanitizer_function', # Optional: for advanced security,
            #                                           # this would be a JS function you provide client-side
        },
        # **This is the most important part for general HTML acceptance**
        'htmlSupport': {
            'allow': [
                # This allows all HTML elements (*), with all attributes, classes, and styles.
                # USE WITH EXTREME CAUTION AND ONLY IF YOU HAVE ROBUST SERVER-SIDE SANITIZATION.
                {'name': '/.*/', 'attributes': True, 'classes': True, 'styles': True},

                # Alternatively, you can be more specific, e.g.:
                # {'name': 'div', 'attributes': True, 'classes': True, 'styles': True},
                # {'name': 'span', 'attributes': True, 'classes': True, 'styles': True},
                # {'name': 'iframe', 'attributes': {'src': True, 'width': True, 'height': True, 'frameborder': True}},
                # {'name': 'script', 'attributes': True}, # Be VERY careful with script tags
                # {'name': 'style', 'attributes': True},  # Be VERY careful with style tags
            ],
            # 'disallow': [
            #     # You can also disallow specific elements or attributes for security
            #     {'name': 'script'},
            #     {'name': '/.*/', 'attributes': {'on*': True}}, # Disallow all 'on' attributes (e.g., onclick)
            # ]
        },
    },
    # You can define other configs too
}

TAGGIT_CASE_INSENSITIVE = True

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.global_sidebar_context',
                'core.context_processors.trending_posts_processor',
                'ads.context_processors.ads_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME'),        # Read from .env
        'USER': os.getenv('DB_USER'),        # Read from .env
        'PASSWORD': os.getenv('DB_PASSWORD'), # Read from .env
        'HOST': os.getenv('DB_HOST'),        # Read from .env
        'PORT': os.getenv('DB_PORT'),        # Read from .env
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            # For older MySQL versions or specific needs:
            'charset': 'utf8mb4',
        },
        
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/media/'  # URL to serve media files
MEDIA_ROOT = BASE_DIR / 'media'  # Local path where files are saved

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') # Read from .env
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID') # Read from .env

# Django Sites Framework
SITE_ID = 1